#include <WiFi.h>
#include <WebServer.h>
#include <EEPROM.h>

#define EEPROM_SIZE 64

WebServer server(80);

String ssid;
String password;
int led1Pin = 2; // Default pin for LED1
int led2Pin = 4; // Default pin for LED2

bool rebootCountdown = false;       // Flag for reboot countdown
unsigned long countdownStartTime;   // Timer for countdown

void setup() {
  Serial.begin(115200);

  // Initialize EEPROM and load settings
  EEPROM.begin(EEPROM_SIZE);
  loadSettings();

  // Attempt to connect to WiFi if SSID and password are saved
  if (ssid.length() > 0 && password.length() > 0) {
    Serial.println("Attempting to connect to WiFi...");
    WiFi.begin(ssid.c_str(), password.c_str());

    unsigned long startAttemptTime = millis();
    int countdown = 10; // 10 seconds countdown

    while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
      Serial.print("Connecting... ");
      Serial.print(countdown);
      Serial.println(" seconds remaining");

      delay(1000);
      countdown--;

      if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\nConnected to WiFi!");
        Serial.print("IP Address: ");
        Serial.println(WiFi.localIP());

        // Display saved settings upon successful connection
        Serial.println("Saved Settings:");
        Serial.print("SSID: ");
        Serial.println(ssid);
        Serial.print("Password: ");
        Serial.println(password);
        Serial.print("LED1 Pin: ");
        Serial.println(led1Pin);
        Serial.print("LED2 Pin: ");
        Serial.println(led2Pin);

        break;
      }
    }

    if (WiFi.status() != WL_CONNECTED) {
      Serial.println("\nFailed to connect. Starting Access Point...");
      startAPMode();
    }
  } else {
    // If no credentials are saved, start AP mode
    startAPMode();
  }

  // Define server routes
  server.on("/", handleRoot);
  server.on("/save", handleSave);

  // Start server
  server.begin();
  Serial.println("Server started");
}

void loop() {
  server.handleClient();

  // Check if reboot countdown is in progress
  if (rebootCountdown) {
    // Check if 10 seconds have passed since countdown started
    unsigned long elapsed = millis() - countdownStartTime;
    if (elapsed >= 10000) {
      Serial.println("Rebooting now...");
      ESP.restart();
    } else {
      // Display countdown every second
      int remainingSeconds = 10 - (elapsed / 1000);
      Serial.print("Rebooting in ");
      Serial.print(remainingSeconds);
      Serial.println(" seconds...");
      delay(1000); // Delay 1 second for the countdown message
    }
  }
}

void startAPMode() {
  WiFi.softAP("ESP32_Setup", "12345678");
  Serial.println("Access Point started");
  Serial.print("AP IP Address: ");
  Serial.println(WiFi.softAPIP());
}

void handleRoot() {
  String html = "<!DOCTYPE html><html><body>";
  html += "<h2>ESP32 Setup</h2>";
  html += "<form action=\"/save\" method=\"POST\">";
  html += "SSID: <input type=\"text\" name=\"ssid\" value=\"" + ssid + "\"><br>";
  html += "Password: <input type=\"text\" name=\"password\" value=\"" + password + "\"><br>";
  html += "LED1 Pin: <input type=\"number\" name=\"led1Pin\" value=\"" + String(led1Pin) + "\"><br>";
  html += "LED2 Pin: <input type=\"number\" name=\"led2Pin\" value=\"" + String(led2Pin) + "\"><br>";
  html += "<input type=\"submit\" value=\"Save\">";
  html += "</form></body></html>";

  server.send(200, "text/html", html);
}

void handleSave() {
  ssid = server.arg("ssid");
  password = server.arg("password");
  led1Pin = server.arg("led1Pin").toInt();
  led2Pin = server.arg("led2Pin").toInt();

  saveSettings();

  // Print saved settings to Serial Monitor
  Serial.println("Settings Saved:");
  Serial.print("SSID: ");
  Serial.println(ssid);
  Serial.print("Password: ");
  Serial.println(password);
  Serial.print("LED1 Pin: ");
  Serial.println(led1Pin);
  Serial.print("LED2 Pin: ");
  Serial.println(led2Pin);

  // Send response to the web client
  server.send(200, "text/html", "<h2>Settings Saved! Rebooting ESP32 in 10 seconds...</h2>");

  // Start 10-second reboot countdown
  rebootCountdown = true;
  countdownStartTime = millis();  // Save the start time
}

void saveSettings() {
  EEPROM.writeString(0, ssid);
  EEPROM.writeString(32, password);
  EEPROM.write(60, led1Pin);
  EEPROM.write(61, led2Pin);
  EEPROM.commit();
}

void loadSettings() {
  ssid = EEPROM.readString(0);
  password = EEPROM.readString(32);
  led1Pin = EEPROM.read(60);
  led2Pin = EEPROM.read(61);
}
